mod flags {
    xflags::xflags! {
        src "src/main.rs"

        cmd app {
            optional -h, --help
            cmd tonic-build {}
        }
    }
    // generated start
    // The following code is generated by `xflags` macro.
    // Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
    #[derive(Debug)]
    pub struct App {
        pub help: bool,
        pub subcommand: AppCmd,
    }

    #[derive(Debug)]
    pub enum AppCmd {
        TonicBuild(TonicBuild),
    }

    #[derive(Debug)]
    pub struct TonicBuild;

    impl App {
        pub const HELP: &'static str = Self::HELP_;

        #[allow(dead_code)]
        pub fn from_env() -> xflags::Result<Self> {
            Self::from_env_()
        }

        #[allow(dead_code)]
        pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
            Self::from_vec_(args)
        }
    }
    // generated end
}

fn main() {
    let flags = flags::App::from_env();
    if flags.is_err() {
        println!("{}", flags.unwrap_err());
        println!("{}", flags::App::HELP);
        return;
    }

    let flags = flags.unwrap();
    if flags.help {
        println!("{}", flags::App::HELP);
        return;
    }

    match flags.subcommand {
        flags::AppCmd::TonicBuild(_) => {
            tonic_build::configure()
                .build_server(false)
                .out_dir("ingle/src/google")
                .compile(
                    &[
                        "proto/googleapis/google/firestore/v1/common.proto",
                        "proto/googleapis/google/firestore/v1/document.proto",
                        "proto/googleapis/google/firestore/v1/firestore.proto",
                        "proto/googleapis/google/firestore/v1/query.proto",
                        "proto/googleapis/google/firestore/v1/write.proto",
                    ],
                    &["proto/googleapis"],
                )
                .unwrap();
        }
    }

    println!("Done!");
}
